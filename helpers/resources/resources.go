// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// .gitignore
// .litconfig
package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Gitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x56\x56\x70\x72\x75\xf7\xf4\x53\x70\x77\xf5\x73\x0d\x72\x0c\x71\x75\x51\x70\xf6\xf7\x0b\x71\xf5\x0b\xe1\x02\xc9\xb9\xfa\xb9\x60\xca\x00\x02\x00\x00\xff\xff\xb2\x6b\xea\x3f\x35\x00\x00\x00")

func GitignoreBytes() ([]byte, error) {
	return bindataRead(
		_Gitignore,
		".gitignore",
	)
}

func Gitignore() (*asset, error) {
	bytes, err := GitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitignore", size: 53, mode: os.FileMode(420), modTime: time.Unix(1548257799, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _Litconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x6b\xc3\x30\x0c\x85\xcf\xcb\xaf\x78\x38\xb7\x31\xe2\xfb\xa0\xb0\x4b\xcf\x1b\x1d\x3b\x85\x32\xd2\x58\x71\xc4\x1c\xab\x58\x32\xec\xe7\x0f\x2f\xa3\x85\xa1\x83\xc4\xf7\x1e\x7c\xea\x13\x1b\x66\xc9\x0b\x47\x2c\x9c\x08\x55\x29\xc0\xe4\x8f\xd5\x42\x58\xa7\x12\x90\x38\x7f\x29\xa4\x20\xb2\x69\xbd\x6c\x12\x6a\x22\xed\x7a\x74\x3d\xc6\x1b\x80\xdb\xf7\x67\x9e\x36\x72\xe7\xae\xc7\xc3\x75\xb2\x15\x07\x38\xdf\x0e\xbf\x48\xf1\xb7\xb6\x6b\x79\x2d\xa9\xc5\x91\xed\x25\xb2\xad\xf5\x32\xcc\xb2\x3d\x7f\xbc\x1f\x4f\xfe\x74\x7c\x7b\x1d\x22\x9b\xeb\xfa\x36\x18\xdb\x13\x70\x2a\x1b\x21\x90\xce\x85\xaf\x26\x65\xd7\x04\x52\xbb\x6b\x4c\x7c\x03\x9c\x27\x63\xc9\xbf\x1e\x95\x5a\x66\x52\x1c\x30\xde\x4b\x3b\xf4\x8b\xa4\x40\xc5\x3f\xba\x27\xb8\xff\x11\x27\x1a\xec\xdb\xdc\xf9\x27\x00\x00\xff\xff\xe2\x0e\x7f\x6a\x2a\x01\x00\x00")

func LitconfigBytes() ([]byte, error) {
	return bindataRead(
		_Litconfig,
		".litconfig",
	)
}

func Litconfig() (*asset, error) {
	bytes, err := LitconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".litconfig", size: 298, mode: os.FileMode(420), modTime: time.Unix(1549997045, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".gitignore": Gitignore,
	".litconfig": Litconfig,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".gitignore": &bintree{Gitignore, map[string]*bintree{}},
	".litconfig": &bintree{Litconfig, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
